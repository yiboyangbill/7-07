local physics = require( "physics" )



physics.start()

physics.setGravity( 0, 25 )

physics.setDrawMode( "hybrid" ) 



local theGround = display.newImage( "land.png" )

theGround.x = display.contentCenterX

theGround.y = 450

theGround.id = "the ground"

physics.addBody( theGround, "static", { 

    friction = 0.5, 

    bounce = 0.3 

    } )

local leftWall = display.newRect( 0, display.contentHeight / 2, 1, display.contentHeight )

leftWall.alpha = 0.0

physics.addBody( leftWall, "static", { 

    friction = 0.5, 

    bounce = 0.3 

    } )

local rightWall = display.newRect( 320, display.contentHeight / 2, 1, display.contentHeight )

rightWall.alpha = 0.0

physics.addBody( rightWall, "static", { 

    friction = 0.5, 

    bounce = 0.3 

    } )



local theGround2 = display.newImage( "land.png" )

theGround2.x = 2000

theGround2.y = 2000

theGround2.id = "the ground 2"

physics.addBody( theGround2, "static", { 

    friction = 0.5, 

    bounce = 0.3 

    } )

local dPad = display.newImage( "d-pad.png" )
dPad.x = 150
dPad.y = display.contentHeight -200
dPad.id = "d-pad"

local upArrow = display.newImage( "upArrow.png" )
upArrow.x = 150
upArrow.y = display.contentHeight - 310
upArrow.id = "up arrow"

local downArrow = display.newImage( "downArrow.png" )
downArrow.x = 150
downArrow.y = display.contentHeight - 90
downArrow.id = "down arrow"

local leftArrow = display.newImage( "leftArrow.png" )
leftArrow.x =40
leftArrow.y = display.contentHeight - 200
leftArrow.id = "left arrow"

local rightArrow = display.newImage( "rightArrow.png" )
rightArrow.x = 260
rightArrow.y = display.contentHeight - 200
rightArrow.id = "right arrow"

local theCharacter = display.newImageRect( "Idle.png" ,50, 100)
theCharacter.x = display.contentCenterX
theCharacter.y = display.contentCenterY
theCharacter.id = "the character"
physics.addBody( theCharacter, "dynamic", { 

    density = 3.0, 

    friction = 0.5, 

    bounce = 0.3 

    } )

local Character = display.newImageRect( "Idle.png" ,50, 100 )
Character.x = display.contentCenterX
Character.y = display.contentCenterY
Character.id = "character"
physics.addBody( Character, "dynamic", { 

    density = 3.0, 

    friction = 0.5, 

    bounce = 0.3 

    } ) 

local jumpButton = display.newImageRect( "jumpButton.png" ,75,75)
jumpButton.x = 150
jumpButton.y = display.contentHeight - 400
jumpButton.id = "jump button"

jumpButton.alpha = 0.5

local shootButton = display.newImageRect( "jumpButton.png" ,75,75)
shootButton.x = 150
shootButton.y = display.contentHeight - 200
shootButton.id = "shoot button"

shootButton.alpha = 0.5

local function characterCollision( self, event )

 

    if ( event.phase == "began" ) then

        print("collision began")

 

    elseif ( event.phase == "ended" ) then

        print( "collision ended")

    end

end

function checkPlayerBulletsOutOfBounds()

	local bulletCounter



    if #playerBullets > 0 then

        for bulletCounter = #playerBullets, 1 ,-1 do

            if playerBullets[bulletCounter].x > display.contentWidth + 1000 then

                playerBullets[bulletCounter]:removeSelf()

                playerBullets[bulletCounter] = nil

                table.remove(playerBullets, bulletCounter)

                print("remove bullet")

            end

        end

    end

end

function upArrow:touch( event )

    if ( event.phase == "ended" ) then


        transition.moveBy( theCharacter, { 

        	x = 0, 

        	y = -100, 

        	time = 100 

        	} )

    end



    return true

end



function downArrow:touch( event )

    if ( event.phase == "ended" ) then


        transition.moveBy( theCharacter, { 

        	x = 0, 

        	y = 50, 

        	time = 100 

        	} )

    end



    return true

end



function leftArrow:touch( event )

    if ( event.phase == "ended" ) then


        transition.moveBy( theCharacter, { 

        	x = -50, 

        	y = 0,

        	time = 100 

        	} )

    end



    return true

end



function rightArrow:touch( event )

    if ( event.phase == "ended" ) then


        transition.moveBy( theCharacter, { 

        	x = 50,
        	y = 0,

        	time = 100

        	} )

    end



    return true

end

function checkCharacterPosition( event )

    if theCharacter.y > display.contentHeight + 500 then

        theCharacter.x = display.contentCenterX

        theCharacter.y = display.contentCenterY

    end

end

function jumpButton:touch( event )

    if ( event.phase == "ended" ) then


        theCharacter:setLinearVelocity( 0, -750 )

    end



    return true

end

function shootButton:touch( event )

    if ( event.phase == "began" ) then


        local aSingleBullet = display.newImageRect( "Kunai.png",50,15 )

        aSingleBullet.x = theCharacter.x

        aSingleBullet.y = theCharacter.y

        physics.addBody( aSingleBullet, 'dynamic' )

        aSingleBullet.isBullet = true

        aSingleBullet.gravityScale = 0

        aSingleBullet.id = "bullet"

        aSingleBullet:setLinearVelocity( 1500, 0 )
    end

    return true

end

local function onCollision( event )

 

    if ( event.phase == "began" ) then

 

        local obj1 = event.object1

        local obj2 = event.object2



        if ( ( obj1.id == "bad character" and obj2.id == "bullet" ) or

             ( obj1.id == "bullet" and obj2.id == "bad character" ) ) then


            display.remove( obj1 )

            display.remove( obj2 )

 			local bulletCounter = nil

 			

            for bulletCounter = #playerBullets, 1, -1 do

                if ( playerBullets[bulletCounter] == obj1 or playerBullets[bulletCounter] == obj2 ) then

                    playerBullets[bulletCounter]:removeSelf()

                    playerBullets[bulletCounter] = nil

                    table.remove( playerBullets, bulletCounter )

                    break

                end

            end


            badCharacter:removeSelf()

            badCharacter = nil

            print ("you could increase a score here.")

            local expolsionSound = audio.loadStream( "./assets/sounds/8bit_bomb_explosion.wav" )

            local explosionChannel = audio.play( expolsionSound )



        end

    end

end

upArrow:addEventListener( "touch", upArrow )

downArrow:addEventListener( "touch", downArrow )

leftArrow:addEventListener( "touch", leftArrow )

rightArrow:addEventListener( "touch", rightArrow )

jumpButton:addEventListener( "touch", jumpButton )

Runtime:addEventListener( "enterFrame", checkCharacterPosition )

theCharacter.collision = characterCollision

theCharacter:addEventListener( "collision" )

shootButton:addEventListener( "touch", shootButton )

Runtime:addEventListener( "collision", onCollision )
